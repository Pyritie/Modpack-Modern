using Common;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LanguageMerger
{
    internal class LanguageMergerProgram
    {
        private class ModLocale
        {
            public readonly string modID = "";
            public readonly Dictionary<string, FileInfo[]> localeToFiles = new();

            private DirectoryInfo _modLocaleOutputFolder;
            private readonly Dictionary<string, Dictionary<string, string>[]> _localeToDeserializedDictionaries = new();
            private readonly Dictionary<string, Dictionary<string, string>> _localeToMergedLanguageDictionaries = new();

            internal async Task DeserializeDictionaries()
            {
                foreach (var kvp in localeToFiles)
                {
                    List<Dictionary<string, string>> deserializedDictionaries = new List<Dictionary<string, string>>();

                    var locale = kvp.Key;
                    var files = kvp.Value;

                    foreach (var file in files)
                    {
                        string json = await File.ReadAllTextAsync(file.FullName);

                        //return an empty dict for empty json files.
                        deserializedDictionaries.Add(JsonConvert.DeserializeObject<Dictionary<string, string>>(json) ?? new Dictionary<string, string>());
                    }
                    _localeToDeserializedDictionaries.Add(locale, deserializedDictionaries.ToArray());
                }
            }

            internal Task MergeDeserializedDictionaries()
            {
                foreach((var locale, var dictionaries) in _localeToDeserializedDictionaries)
                {
                    Dictionary<string, string> mergedDictionary = new Dictionary<string, string>();
                    mergedDictionary.Add("__COMMENT__", "This file was auto generated by the LanguageMerger, read the file \".README IF TRANSLATING\" found in \"minecraft/kubejs\" for more information.");
                    foreach(var innerDict in dictionaries)
                    {
                        foreach((var key, var value) in innerDict)
                        {
                            if(mergedDictionary.ContainsKey(key))
                            {
                                ConsoleLogHelper.WriteLine($"Key \"{key}\" already exists in the merged dictionary! value will be overwritten. Original value: {mergedDictionary[key]}", LogLevel.Warning);
                            }
                            mergedDictionary[key] = value;
                        }
                    }

                    _localeToMergedLanguageDictionaries.Add(locale, mergedDictionary);
                }
                return Task.CompletedTask;
            }

            internal Task EnsureOutputDir(DirectoryInfo mainOutputDir)
            {
                var modIdDirectory = mainOutputDir.CreateSubdirectory(modID);
                _modLocaleOutputFolder = modIdDirectory.CreateSubdirectory("lang");

                return Task.CompletedTask;
            }

            internal async Task WriteFiles(bool prettyPrint)
            {
                List<StreamWriter> writers = new List<StreamWriter>();
                List<Task> tasks = new List<Task>();
                foreach((var locale, var finishedDictionary) in _localeToMergedLanguageDictionaries)
                {
                    var fileOutput = Path.Combine(_modLocaleOutputFolder.FullName, $"{locale}.json");
                    //delete the previous file.
                    File.Delete(fileOutput);

                    StreamWriter writer = File.CreateText(fileOutput);
                    writers.Add(writer);
                    var json = JsonConvert.SerializeObject(finishedDictionary, prettyPrint ? Formatting.Indented : Formatting.None);
                    tasks.Add(writer.WriteAsync(json));
                }
                await Task.WhenAll(tasks);

                foreach(var writer in writers)
                {
                    writer.Dispose();
                }
            }

            internal Task MoveFilesToKJSAssetsFolder(DirectoryInfo kjsAssetsFolder)
            {
                var modIdDirectory = kjsAssetsFolder.CreateSubdirectory(modID);
                var langDirectory = modIdDirectory.CreateSubdirectory("lang");

                foreach (var file in _modLocaleOutputFolder.EnumerateFiles("*.json"))
                {
                    file.CopyTo(Path.Combine(langDirectory.FullName, file.Name), true);
                }
                return Task.CompletedTask;
            }

            public ModLocale(string modID)
            {
                this.modID = modID;
            }
        }

        List<ModLocale> _modLocales = new List<ModLocale>();
        private ProgramArguments _arguments;

        public async Task<bool> Run()
        {
            ConsoleLogHelper.WriteLine("Language Merger Program has Started!", LogLevel.Message);

            ConsoleLogHelper.WriteLine("Generating Mod Locales", LogLevel.Message);
            await GenerateModLocales();
            ConsoleLogHelper.WriteLine("Creating Output Directories", LogLevel.Message);
            await CreateOutputDirectories();
            ConsoleLogHelper.WriteLine("Deserializing JSON Files", LogLevel.Message);
            await DeserializeJSONFiles();
            ConsoleLogHelper.WriteLine("Merging Deserialized JSON Files", LogLevel.Message);
            await MergeLanguageDictionaries();
            ConsoleLogHelper.WriteLine("Writing Files", LogLevel.Message);
            await WriteFiles();

            if (_arguments.shouldOverwriteFiles)
            {
                ConsoleLogHelper.WriteLine("Overwriting Files", LogLevel.Message);
                await MoveFilesToKJSAssetsFolder();
            }

            return true;
        }

        private Task GenerateModLocales()
        {
            DirectoryInfo[] enumeratedDirectories = _arguments.languageFilesFolder.EnumerateDirectories().ToArray();
            foreach(var modDirectory in enumeratedDirectories)
            {
                ModLocale locale = new ModLocale(modDirectory.Name);
                var localeFolders = modDirectory.EnumerateDirectories().ToArray();

                int jsonFileCount = 0;
                foreach(var localeFolder in localeFolders)
                {
                    var languageFiles = localeFolder.EnumerateFiles("*.json", SearchOption.AllDirectories).ToList();
                    jsonFileCount = languageFiles.Count;
                    locale.localeToFiles.Add(localeFolder.Name, languageFiles.ToArray());
                }
                ConsoleLogHelper.WriteLine($"Created Mod Locale for {modDirectory}, found {jsonFileCount} json files", LogLevel.Info);
                _modLocales.Add(locale);
            }
            return Task.CompletedTask;
        }

        private async Task DeserializeJSONFiles()
        {
            List<Task> tasks = new List<Task>();
            foreach (ModLocale modLocale in _modLocales)
            {
                ConsoleLogHelper.WriteLine($"Deserializing JSON files for {modLocale.modID}", LogLevel.Info);
                tasks.Add(modLocale.DeserializeDictionaries());
            }
            await Task.WhenAll(tasks);
        }

        private async Task MergeLanguageDictionaries()
        {
            List<Task> tasks = new List<Task>();
            foreach(ModLocale locale in _modLocales)
            {
                ConsoleLogHelper.WriteLine($"Merging JSON for {locale.modID}", LogLevel.Info);
                tasks.Add(locale.MergeDeserializedDictionaries());
            }
            await Task.WhenAll(tasks);
        }

        private async Task CreateOutputDirectories()
        {
            var workingDirectory = Directory.GetCurrentDirectory();
            var outputDirectory = Path.Combine(workingDirectory, "OUTPUT");

            var dirInfo = Directory.CreateDirectory(outputDirectory);

            List<Task> tasks = new List<Task>();
            foreach(ModLocale locale in _modLocales)
            {
                tasks.Add(locale.EnsureOutputDir(dirInfo));
            }
            await Task.WhenAll(tasks);
        }

        private async Task WriteFiles()
        {
            List<Task> tasks = new List<Task>();
            foreach(ModLocale locale in _modLocales)
            {
                ConsoleLogHelper.WriteLine($"Writing merged JSON for {locale.modID}'s Locales:\n{string.Join('\n', locale.localeToFiles.Keys)}", LogLevel.Info);
                tasks.Add(locale.WriteFiles(_arguments.shouldPrettyPrint));
            }
            await Task.WhenAll(tasks);
        }

        private async Task MoveFilesToKJSAssetsFolder()
        {
            List<Task> tasks = new List<Task>();
            foreach(ModLocale locale in _modLocales)
            {
                ConsoleLogHelper.WriteLine($"Moving merged JSON Files for {locale.modID} to the kjs assets folder.", LogLevel.Info);
                tasks.Add(locale.MoveFilesToKJSAssetsFolder(_arguments.kjsAssetsFolder));
            }
            await Task.WhenAll(tasks);
        }

        public LanguageMergerProgram(ProgramArguments arguments)
        {
            _arguments = arguments;
        }
    }
}
